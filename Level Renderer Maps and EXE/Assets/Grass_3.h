// "Grass_3.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Grass_3.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Grass_3_version_
const char Grass_3_version[4] = { '0','1','9','d' };
#define _Grass_3_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Grass_3_vertexcount_
const unsigned Grass_3_vertexcount = 75;
#define _Grass_3_vertexcount_
#endif
#ifndef _Grass_3_indexcount_
const unsigned Grass_3_indexcount = 360;
#define _Grass_3_indexcount_
#endif
#ifndef _Grass_3_materialcount_
const unsigned Grass_3_materialcount = 1; // can be used for batched draws
#define _Grass_3_materialcount_
#endif
#ifndef _Grass_3_meshcount_
const unsigned Grass_3_meshcount = 1;
#define _Grass_3_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Grass_3_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Grass_3_vertices[75] =
{
	{	{ -0.155351f, 1.158402f, -0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.487900f, 0.533600f, -0.690800f }	},
	{	{ -0.049573f, 1.005990f, -0.151202f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.576600f, 0.462500f, -0.673500f }	},
	{	{ -0.198822f, 0.961578f, -0.197819f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.011200f, 0.123300f, -0.992300f }	},
	{	{ -0.273599f, 1.089017f, -0.182803f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.105800f, 0.180100f, -0.977900f }	},
	{	{ -0.372420f, 1.257434f, -0.123872f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.332100f, 0.566000f, -0.754500f }	},
	{	{ -0.264280f, 1.262190f, -0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.295700f, 0.725000f, -0.622000f }	},
	{	{ -0.391848f, 1.019633f, -0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.703500f, -0.168500f, -0.690400f }	},
	{	{ -0.429320f, 1.165350f, -0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.777200f, 0.095500f, -0.622000f }	},
	{	{ -0.357084f, 0.944855f, -0.142742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.611200f, -0.239800f, -0.754300f }	},
	{	{ -0.404664f, 0.945089f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.904800f, -0.425800f, -0.000000f }	},
	{	{ -0.431264f, 0.996505f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.947500f, -0.319600f, -0.000000f }	},
	{	{ -0.479258f, 1.194745f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.982900f, 0.184100f, -0.000000f }	},
	{	{ -0.391848f, 1.019633f, 0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.703500f, -0.168500f, 0.690400f }	},
	{	{ -0.429320f, 1.165350f, 0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.777200f, 0.095500f, 0.622000f }	},
	{	{ -0.357084f, 0.944855f, 0.142741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.611200f, -0.239800f, 0.754300f }	},
	{	{ -0.198822f, 0.961578f, 0.197819f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.011200f, 0.123300f, 0.992300f }	},
	{	{ -0.273599f, 1.089017f, 0.182802f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.105800f, 0.180100f, 0.977900f }	},
	{	{ -0.372420f, 1.257434f, 0.123872f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.332100f, 0.566000f, 0.754500f }	},
	{	{ -0.155351f, 1.158402f, 0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.487900f, 0.533600f, 0.690800f }	},
	{	{ -0.264280f, 1.262190f, 0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.295700f, 0.725000f, 0.622000f }	},
	{	{ -0.049573f, 1.005990f, 0.151201f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.576600f, 0.462500f, 0.673500f }	},
	{	{ -0.265582f, 1.320123f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.318700f, 0.947800f, -0.000000f }	},
	{	{ -0.405361f, 1.313573f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.506100f, 0.862500f, -0.000000f }	},
	{	{ -0.006103f, 1.031497f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.806900f, 0.590700f, -0.000000f }	},
	{	{ -0.115934f, 1.181530f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.737700f, 0.675100f, -0.000000f }	},
	{	{ 0.110978f, 1.132982f, -0.105558f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.604400f, 0.190100f, -0.773600f }	},
	{	{ 0.126861f, 0.980296f, -0.116413f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.619700f, 0.114900f, -0.776400f }	},
	{	{ -0.044910f, 0.980296f, -0.152305f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011900f, 0.071700f, -0.997300f }	},
	{	{ -0.044800f, 1.133084f, -0.140743f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.006100f, 0.147400f, -0.989000f }	},
	{	{ -0.044655f, 1.355633f, -0.095372f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000300f, 0.555400f, -0.831500f }	},
	{	{ 0.064017f, 1.297864f, -0.073664f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.542700f, 0.398400f, -0.739400f }	},
	{	{ -0.200578f, 1.133186f, -0.105558f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.619800f, 0.161500f, -0.768000f }	},
	{	{ -0.153403f, 1.298006f, -0.073664f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.542200f, 0.399100f, -0.739400f }	},
	{	{ -0.209570f, 0.980296f, -0.109900f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.641300f, 0.055800f, -0.765300f }	},
	{	{ -0.256045f, 0.980296f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998900f, 0.047400f, -0.000000f }	},
	{	{ -0.252504f, 1.133220f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.983900f, 0.178700f, -0.000000f }	},
	{	{ -0.185401f, 1.355725f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.748500f, 0.663100f, -0.000000f }	},
	{	{ -0.200578f, 1.133186f, 0.105557f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.619800f, 0.161500f, 0.768000f }	},
	{	{ -0.153403f, 1.298006f, 0.073663f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.542200f, 0.399100f, 0.739400f }	},
	{	{ -0.209570f, 0.980296f, 0.109899f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.641300f, 0.055800f, 0.765300f }	},
	{	{ -0.044910f, 0.980296f, 0.152304f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.011900f, 0.071700f, 0.997300f }	},
	{	{ -0.044800f, 1.133084f, 0.140743f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.006100f, 0.147400f, 0.989000f }	},
	{	{ -0.044655f, 1.355633f, 0.095371f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000300f, 0.555400f, 0.831500f }	},
	{	{ 0.110978f, 1.132982f, 0.105557f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.604400f, 0.190100f, 0.773600f }	},
	{	{ 0.064017f, 1.297864f, 0.073663f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.542700f, 0.398400f, 0.739400f }	},
	{	{ 0.126861f, 0.980296f, 0.116413f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.619700f, 0.114900f, 0.776400f }	},
	{	{ 0.096091f, 1.355541f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.749400f, 0.662100f, -0.000000f }	},
	{	{ -0.044607f, 1.429816f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000600f, 1.000000f, -0.000000f }	},
	{	{ 0.184127f, 0.980296f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.990400f, 0.137700f, -0.000000f }	},
	{	{ 0.162904f, 1.132948f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.974500f, 0.224500f, -0.000000f }	},
	{	{ 0.465561f, 0.972626f, -0.209716f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725300f, -0.126200f, -0.676700f }	},
	{	{ 0.444496f, 0.918956f, -0.221343f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.646300f, -0.163500f, -0.745300f }	},
	{	{ 0.199348f, 0.934729f, -0.316178f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.012300f, 0.153200f, -0.988100f }	},
	{	{ 0.255795f, 1.021440f, -0.305663f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.133100f, 0.184000f, -0.973900f }	},
	{	{ 0.416346f, 1.268069f, -0.209309f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.374200f, 0.573500f, -0.728800f }	},
	{	{ 0.509610f, 1.116319f, -0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.788600f, 0.093200f, -0.607800f }	},
	{	{ 0.063671f, 1.146509f, -0.229247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.461000f, 0.563000f, -0.685900f }	},
	{	{ 0.239834f, 1.291937f, -0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.221900f, 0.765700f, -0.603700f }	},
	{	{ -0.089557f, 0.946256f, -0.248411f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617100f, 0.512800f, -0.596700f }	},
	{	{ -0.179559f, 0.947926f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.791700f, 0.610900f, -0.000000f }	},
	{	{ -0.000371f, 1.188199f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704300f, 0.709900f, -0.000000f }	},
	{	{ 0.240931f, 1.382260f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.232500f, 0.972600f, -0.000000f }	},
	{	{ 0.063671f, 1.146509f, 0.229247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.461000f, 0.563000f, 0.685900f }	},
	{	{ 0.239834f, 1.291937f, 0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.221900f, 0.765700f, 0.603700f }	},
	{	{ -0.089557f, 0.946256f, 0.248410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617100f, 0.512800f, 0.596700f }	},
	{	{ 0.199348f, 0.934729f, 0.316177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.012300f, 0.153200f, 0.988100f }	},
	{	{ 0.255795f, 1.021440f, 0.305662f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.133100f, 0.184000f, 0.973900f }	},
	{	{ 0.416346f, 1.268069f, 0.209308f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.374200f, 0.573500f, 0.728800f }	},
	{	{ 0.465561f, 0.972627f, 0.209716f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725300f, -0.126200f, 0.676700f }	},
	{	{ 0.509610f, 1.116319f, 0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.788600f, 0.093200f, 0.607800f }	},
	{	{ 0.444496f, 0.918957f, 0.221342f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.646300f, -0.163500f, 0.745300f }	},
	{	{ 0.521002f, 0.907690f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.956200f, -0.292500f, -0.000000f }	},
	{	{ 0.536188f, 0.958873f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.965200f, -0.261300f, -0.000000f }	},
	{	{ 0.591761f, 1.153877f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.985600f, 0.169100f, -0.000000f }	},
	{	{ 0.469863f, 1.338840f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.557500f, 0.830100f, -0.000000f }	},
};
#define _Grass_3_vertices_
#endif
#ifndef _Grass_3_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Grass_3_indices[360] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 0,
	 3, 4, 0,
	 6, 7, 4,
	 3, 6, 4,
	 2, 8, 6,
	 3, 2, 6,
	 6, 8, 9,
	 10, 6, 9,
	 11, 7, 6,
	 10, 11, 6,
	 12, 13, 11,
	 10, 12, 11,
	 9, 14, 12,
	 10, 9, 12,
	 12, 14, 15,
	 16, 12, 15,
	 17, 13, 12,
	 16, 17, 12,
	 18, 19, 17,
	 16, 18, 17,
	 15, 20, 18,
	 16, 15, 18,
	 17, 19, 21,
	 22, 17, 21,
	 11, 13, 17,
	 22, 11, 17,
	 4, 7, 11,
	 22, 4, 11,
	 21, 5, 4,
	 22, 21, 4,
	 18, 20, 23,
	 24, 18, 23,
	 21, 19, 18,
	 24, 21, 18,
	 0, 5, 21,
	 24, 0, 21,
	 23, 1, 0,
	 24, 23, 0,
	 25, 26, 27,
	 28, 25, 27,
	 29, 30, 25,
	 28, 29, 25,
	 31, 32, 29,
	 28, 31, 29,
	 27, 33, 31,
	 28, 27, 31,
	 31, 33, 34,
	 35, 31, 34,
	 36, 32, 31,
	 35, 36, 31,
	 37, 38, 36,
	 35, 37, 36,
	 34, 39, 37,
	 35, 34, 37,
	 37, 39, 40,
	 41, 37, 40,
	 42, 38, 37,
	 41, 42, 37,
	 43, 44, 42,
	 41, 43, 42,
	 40, 45, 43,
	 41, 40, 43,
	 42, 44, 46,
	 47, 42, 46,
	 36, 38, 42,
	 47, 36, 42,
	 29, 32, 36,
	 47, 29, 36,
	 46, 30, 29,
	 47, 46, 29,
	 43, 45, 48,
	 49, 43, 48,
	 46, 44, 43,
	 49, 46, 43,
	 25, 30, 46,
	 49, 25, 46,
	 48, 26, 25,
	 49, 48, 25,
	 50, 51, 52,
	 53, 50, 52,
	 54, 55, 50,
	 53, 54, 50,
	 56, 57, 54,
	 53, 56, 54,
	 52, 58, 56,
	 53, 52, 56,
	 56, 58, 59,
	 60, 56, 59,
	 61, 57, 56,
	 60, 61, 56,
	 62, 63, 61,
	 60, 62, 61,
	 59, 64, 62,
	 60, 59, 62,
	 62, 64, 65,
	 66, 62, 65,
	 67, 63, 62,
	 66, 67, 62,
	 68, 69, 67,
	 66, 68, 67,
	 65, 70, 68,
	 66, 65, 68,
	 68, 70, 71,
	 72, 68, 71,
	 73, 69, 68,
	 72, 73, 68,
	 50, 55, 73,
	 72, 50, 73,
	 71, 51, 50,
	 72, 71, 50,
	 67, 69, 73,
	 74, 67, 73,
	 61, 63, 67,
	 74, 61, 67,
	 54, 57, 61,
	 74, 54, 61,
	 73, 55, 54,
	 74, 73, 54,
};
#define _Grass_3_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Grass_3_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Grass_3_materials[1] =
{
	{
		{{ 0.250294f, 0.328747f, 0.018225f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Green_Light",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Grass_3_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Grass_3_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Grass_3_batches[1][2] =
{
	{ 360, 0 },
};
#define _Grass_3_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Grass_3_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Grass_3_meshes[1] =
{
	{
		"default",
		360,
		0,
		0,
	},
};
#define _Grass_3_meshes_
#endif
