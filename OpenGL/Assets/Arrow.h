// "Arrow.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Arrow.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Arrow_version_
const char Arrow_version[4] = { '0','1','9','d' };
#define _Arrow_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Arrow_vertexcount_
const unsigned Arrow_vertexcount = 104;
#define _Arrow_vertexcount_
#endif
#ifndef _Arrow_indexcount_
const unsigned Arrow_indexcount = 228;
#define _Arrow_indexcount_
#endif
#ifndef _Arrow_materialcount_
const unsigned Arrow_materialcount = 1; // can be used for batched draws
#define _Arrow_materialcount_
#endif
#ifndef _Arrow_meshcount_
const unsigned Arrow_meshcount = 1;
#define _Arrow_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Arrow_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Arrow_vertices[104] =
{
	{	{ -1.059481f, -0.000000f, -0.180167f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.017085f, -0.000000f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.161702f, -0.000000f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.162138f, -0.000000f, -0.085210f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.162573f, 0.147278f, 0.084376f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.021457f, 0.147278f, 0.182535f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.996886f, 0.147278f, 0.223550f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.196315f, 0.147278f, 0.220484f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.059481f, 0.113886f, -0.180167f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.964800f, 0.000000f, -0.262900f }	},
	{	{ -1.017085f, 0.113886f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.860500f, 0.000000f, -0.509500f }	},
	{	{ -1.017085f, -0.000000f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.860500f, 0.000000f, -0.509500f }	},
	{	{ -1.059481f, -0.000000f, -0.180167f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.964800f, 0.000000f, -0.262900f }	},
	{	{ -1.015778f, 0.113886f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.857800f, 0.000000f, 0.513900f }	},
	{	{ -1.058541f, 0.113886f, 0.185609f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.963500f, 0.000000f, 0.267800f }	},
	{	{ -1.058541f, -0.000000f, 0.185609f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.963500f, 0.000000f, 0.267800f }	},
	{	{ -1.015778f, -0.000000f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.857800f, 0.000000f, 0.513900f }	},
	{	{ 0.161048f, 0.000000f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.794173f, -0.000000f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.195180f, 0.147278f, -0.221490f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -0.998021f, 0.147278f, -0.218424f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ -1.022381f, 0.147278f, -0.177284f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.162138f, 0.147278f, -0.085210f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.794173f, 0.113886f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.794183f, 0.113886f, -0.003898f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.794183f, -0.000000f, -0.003898f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.794173f, -0.000000f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.688071f, 0.147278f, -0.049079f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.106500f, 0.994300f, -0.000300f }	},
	{	{ 0.194618f, 0.147278f, -0.440069f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.794192f, -0.000000f, -0.000184f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.794202f, -0.000000f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.163009f, -0.000000f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.162573f, -0.000000f, 0.084376f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.688152f, 0.147278f, -0.017539f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.152000f, 0.988400f, -0.000400f }	},
	{	{ 0.794192f, 0.113886f, -0.000184f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.794202f, 0.113886f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.794202f, -0.000000f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.794192f, -0.000000f, -0.000184f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.002600f }	},
	{	{ 0.163663f, -0.000000f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.794202f, -0.000000f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.625100f, -0.000000f, 0.780600f }	},
	{	{ 0.794202f, 0.113886f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.625100f, -0.000000f, 0.780600f }	},
	{	{ 0.163663f, 0.113886f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.625100f, -0.000000f, 0.780600f }	},
	{	{ 0.163663f, -0.000000f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.625100f, -0.000000f, 0.780600f }	},
	{	{ 0.161048f, 0.113886f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.161048f, 0.000000f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.161702f, -0.000000f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.161702f, 0.113886f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.688314f, 0.147278f, 0.045543f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.106500f, 0.994300f, -0.000300f }	},
	{	{ 0.688233f, 0.147278f, 0.014002f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.152000f, 0.988400f, -0.000400f }	},
	{	{ 0.794183f, -0.000000f, -0.003898f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.196877f, 0.147278f, 0.439063f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, 0.000000f }	},
	{	{ 0.794173f, 0.113886f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.621000f, 0.000000f, -0.783800f }	},
	{	{ 0.794173f, -0.000000f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.621000f, 0.000000f, -0.783800f }	},
	{	{ 0.161048f, 0.000000f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.621000f, 0.000000f, -0.783800f }	},
	{	{ 0.161048f, 0.113886f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.621000f, 0.000000f, -0.783800f }	},
	{	{ 0.163663f, -0.000000f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.163663f, 0.113886f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.163009f, 0.113886f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.163009f, -0.000000f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.002600f }	},
	{	{ 0.163009f, 0.113886f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002600f, 0.000000f, 1.000000f }	},
	{	{ -1.015778f, 0.113886f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002600f, 0.000000f, 1.000000f }	},
	{	{ -1.015778f, -0.000000f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002600f, 0.000000f, 1.000000f }	},
	{	{ 0.163009f, -0.000000f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.002600f, 0.000000f, 1.000000f }	},
	{	{ -1.015778f, -0.000000f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.058541f, -0.000000f, 0.185609f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -1.058541f, 0.113886f, 0.185609f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.652000f, 0.739500f, 0.167300f }	},
	{	{ -1.015778f, 0.113886f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.606600f, 0.707100f, 0.363400f }	},
	{	{ -0.996886f, 0.147278f, 0.223550f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.606600f, 0.707100f, 0.363400f }	},
	{	{ -1.021457f, 0.147278f, 0.182535f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.646400f, 0.736300f, 0.200000f }	},
	{	{ -1.015778f, 0.113886f, 0.256991f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001800f, 0.707100f, 0.707100f }	},
	{	{ 0.163009f, 0.113886f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001800f, 0.707100f, 0.707100f }	},
	{	{ 0.196315f, 0.147278f, 0.220484f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001800f, 0.707100f, 0.707100f }	},
	{	{ -0.996886f, 0.147278f, 0.223550f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.001800f, 0.707100f, 0.707100f }	},
	{	{ 0.161702f, 0.113886f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.707100f, -0.707100f }	},
	{	{ -1.017085f, 0.113886f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.707100f, -0.707100f }	},
	{	{ -0.998021f, 0.147278f, -0.218424f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.707100f, -0.707100f }	},
	{	{ 0.195180f, 0.147278f, -0.221490f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.001800f, 0.707100f, -0.707100f }	},
	{	{ 0.794183f, 0.113886f, -0.003898f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.300500f, 0.953800f, -0.000800f }	},
	{	{ 0.794173f, 0.113886f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.300500f, 0.953800f, -0.000800f }	},
	{	{ 0.196877f, 0.147278f, 0.439063f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.196315f, 0.147278f, 0.220484f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.163009f, 0.113886f, 0.253962f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.163663f, 0.113886f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.794173f, 0.113886f, -0.007612f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.439100f, 0.707100f, -0.554200f }	},
	{	{ 0.161048f, 0.113886f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.439100f, 0.707100f, -0.554200f }	},
	{	{ 0.194618f, 0.147278f, -0.440069f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.439100f, 0.707100f, -0.554200f }	},
	{	{ 0.688071f, 0.147278f, -0.049079f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.439100f, 0.707100f, -0.554200f }	},
	{	{ 0.161048f, 0.113886f, -0.509272f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.161702f, 0.113886f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.195180f, 0.147278f, -0.221490f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.194618f, 0.147278f, -0.440069f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.707100f, 0.001800f }	},
	{	{ 0.688314f, 0.147278f, 0.045543f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.442000f, 0.707100f, 0.552000f }	},
	{	{ 0.196877f, 0.147278f, 0.439063f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.442000f, 0.707100f, 0.552000f }	},
	{	{ 0.163663f, 0.113886f, 0.508438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.442000f, 0.707100f, 0.552000f }	},
	{	{ 0.794202f, 0.113886f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.442000f, 0.707100f, 0.552000f }	},
	{	{ -1.017085f, 0.113886f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.608400f, 0.707100f, -0.360300f }	},
	{	{ -1.059481f, 0.113886f, -0.180167f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.652900f, 0.739500f, -0.163900f }	},
	{	{ -1.022381f, 0.147278f, -0.177284f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.647400f, 0.736300f, -0.196700f }	},
	{	{ -0.998021f, 0.147278f, -0.218424f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.608400f, 0.707100f, -0.360300f }	},
	{	{ 0.794202f, 0.113886f, 0.003530f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.300500f, 0.953800f, -0.000800f }	},
	{	{ 0.794192f, 0.113886f, -0.000184f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.300500f, 0.953800f, -0.000800f }	},
	{	{ -1.017085f, 0.113886f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002600f, 0.000000f, -1.000000f }	},
	{	{ 0.161702f, 0.113886f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002600f, 0.000000f, -1.000000f }	},
	{	{ 0.161702f, -0.000000f, -0.254796f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002600f, 0.000000f, -1.000000f }	},
	{	{ -1.017085f, -0.000000f, -0.251767f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.002600f, 0.000000f, -1.000000f }	},
};
#define _Arrow_vertices_
#endif
#ifndef _Arrow_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Arrow_indices[228] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 13, 14,
	 15, 12, 14,
	 2, 16, 17,
	 18, 19, 20,
	 21, 18, 20,
	 22, 23, 24,
	 25, 22, 24,
	 26, 27, 18,
	 28, 29, 30,
	 31, 28, 30,
	 32, 26, 18,
	 21, 32, 18,
	 21, 20, 5,
	 4, 21, 5,
	 33, 34, 35,
	 36, 33, 35,
	 29, 37, 30,
	 38, 39, 40,
	 41, 38, 40,
	 42, 43, 44,
	 45, 42, 44,
	 46, 47, 4,
	 7, 46, 4,
	 17, 48, 3,
	 2, 17, 3,
	 48, 28, 31,
	 3, 48, 31,
	 7, 49, 46,
	 50, 51, 52,
	 53, 50, 52,
	 47, 32, 21,
	 4, 47, 21,
	 54, 55, 56,
	 57, 54, 56,
	 23, 33, 36,
	 24, 23, 36,
	 58, 59, 60,
	 61, 58, 60,
	 13, 8, 11,
	 14, 13, 11,
	 62, 63, 31,
	 30, 62, 31,
	 63, 0, 3,
	 31, 63, 3,
	 64, 65, 66,
	 67, 64, 66,
	 68, 69, 70,
	 71, 68, 70,
	 72, 73, 74,
	 75, 72, 74,
	 76, 77, 26,
	 32, 76, 26,
	 78, 79, 80,
	 81, 78, 80,
	 82, 83, 84,
	 85, 82, 84,
	 86, 87, 88,
	 89, 86, 88,
	 90, 91, 92,
	 93, 90, 92,
	 94, 95, 96,
	 97, 94, 96,
	 95, 64, 67,
	 96, 95, 67,
	 98, 99, 47,
	 46, 98, 47,
	 99, 76, 32,
	 47, 99, 32,
	 100, 101, 102,
	 103, 100, 102,
};
#define _Arrow_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Arrow_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Arrow_materials[1] =
{
	{
		{{ 0.219062f, 0.041810f, 0.039528f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Main_Dark",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Arrow_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Arrow_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Arrow_batches[1][2] =
{
	{ 228, 0 },
};
#define _Arrow_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Arrow_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Arrow_meshes[1] =
{
	{
		"default",
		228,
		0,
		0,
	},
};
#define _Arrow_meshes_
#endif
