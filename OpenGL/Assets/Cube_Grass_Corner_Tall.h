// "Cube_Grass_Corner_Tall.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Cube_Grass_Corner_Tall.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Cube_Grass_Corner_Tall_version_
const char Cube_Grass_Corner_Tall_version[4] = { '0','1','9','d' };
#define _Cube_Grass_Corner_Tall_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Cube_Grass_Corner_Tall_vertexcount_
const unsigned Cube_Grass_Corner_Tall_vertexcount = 99;
#define _Cube_Grass_Corner_Tall_vertexcount_
#endif
#ifndef _Cube_Grass_Corner_Tall_indexcount_
const unsigned Cube_Grass_Corner_Tall_indexcount = 348;
#define _Cube_Grass_Corner_Tall_indexcount_
#endif
#ifndef _Cube_Grass_Corner_Tall_materialcount_
const unsigned Cube_Grass_Corner_Tall_materialcount = 4; // can be used for batched draws
#define _Cube_Grass_Corner_Tall_materialcount_
#endif
#ifndef _Cube_Grass_Corner_Tall_meshcount_
const unsigned Cube_Grass_Corner_Tall_meshcount = 4;
#define _Cube_Grass_Corner_Tall_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Cube_Grass_Corner_Tall_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Cube_Grass_Corner_Tall_vertices[99] =
{
	{	{ -0.962974f, -0.024298f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382700f, 0.000000f, -0.923900f }	},
	{	{ -0.873585f, -0.024298f, -0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.195100f, 0.000000f, -0.980800f }	},
	{	{ -0.873585f, -0.327668f, -0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.195100f, 0.000000f, -0.980800f }	},
	{	{ -0.962974f, -0.327668f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382700f, 0.000000f, -0.923900f }	},
	{	{ -0.962974f, -0.024298f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.923900f, 0.000000f, -0.382700f }	},
	{	{ -0.962974f, -0.327668f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.923900f, 0.000000f, -0.382700f }	},
	{	{ -1.000000f, -0.327668f, -0.873584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.980800f, 0.000000f, -0.195100f }	},
	{	{ -1.000000f, -0.024298f, -0.873584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.980800f, 0.000000f, -0.195100f }	},
	{	{ -0.999999f, -0.327668f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.999999f, -0.024298f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ 0.999999f, -0.024298f, -1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.999999f, -0.327668f, -1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.999999f, 0.623989f, -1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.999999f, 0.281256f, -1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.873585f, 0.281256f, -0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.195100f, 0.000000f, -0.980800f }	},
	{	{ -0.873585f, 0.623989f, -0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.195100f, 0.000000f, -0.980800f }	},
	{	{ 0.999999f, -0.623989f, -1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.873585f, -0.623989f, -0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.195100f, 0.000000f, -0.980800f }	},
	{	{ -0.962974f, 0.281256f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382700f, 0.000000f, -0.923900f }	},
	{	{ -0.962974f, 0.623989f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382700f, 0.000000f, -0.923900f }	},
	{	{ -0.962974f, -0.623989f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382700f, 0.000000f, -0.923900f }	},
	{	{ -0.962974f, 0.623989f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.923900f, 0.000000f, -0.382700f }	},
	{	{ -0.962974f, 0.281256f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.923900f, 0.000000f, -0.382700f }	},
	{	{ -1.000000f, 0.281256f, -0.873584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.980800f, 0.000000f, -0.195100f }	},
	{	{ -1.000000f, 0.623989f, -0.873584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.980800f, 0.000000f, -0.195100f }	},
	{	{ -0.962974f, -0.623989f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.923900f, 0.000000f, -0.382700f }	},
	{	{ -1.000000f, -0.623989f, -0.873584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.980800f, 0.000000f, -0.195100f }	},
	{	{ -0.999999f, 0.281256f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.999999f, 0.623989f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.999999f, -0.623989f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.873585f, -1.000000f, -0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.195100f, 0.000000f, -0.980800f }	},
	{	{ -0.962974f, -1.000000f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382700f, 0.000000f, -0.923900f }	},
	{	{ 0.999999f, -1.000000f, -1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, -1.000000f }	},
	{	{ -1.000000f, -1.000000f, -0.873584f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.980800f, 0.000000f, -0.195100f }	},
	{	{ -0.999999f, -1.000000f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, 0.000000f }	},
	{	{ -0.962974f, -1.000000f, -0.962973f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.923900f, 0.000000f, -0.382700f }	},
	{	{ -0.848864f, 0.995909f, -0.355917f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.136500f, 0.990600f, 0.000000f }	},
	{	{ -0.350527f, 0.995956f, -0.355842f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.346529f, 0.995956f, -0.848220f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000100f, 0.990600f, -0.137100f }	},
	{	{ -0.848864f, 0.995909f, -0.848270f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.137300f, 0.981000f, -0.137200f }	},
	{	{ -1.019855f, 0.947920f, -0.856113f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.607400f, 0.782100f, -0.139400f }	},
	{	{ -1.020520f, 0.947920f, -0.362438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.270300f, 0.962800f, 0.000100f }	},
	{	{ -0.857709f, 0.947920f, -1.020243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.147500f, 0.778800f, -0.609700f }	},
	{	{ -0.990502f, 0.910018f, -0.984115f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.503700f, 0.708700f, -0.494000f }	},
	{	{ -0.349131f, 0.947225f, -1.020231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000300f, 0.962400f, -0.271600f }	},
	{	{ -1.116719f, 0.644971f, -0.895094f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.987900f, -0.057500f, -0.144300f }	},
	{	{ -1.116719f, 0.644971f, -0.394693f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998700f, -0.051900f, 0.000000f }	},
	{	{ -1.099940f, 0.801033f, -0.381801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.954700f, 0.297700f, -0.000100f }	},
	{	{ -1.099940f, 0.801033f, -0.879508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.937800f, 0.318200f, -0.138600f }	},
	{	{ -1.054234f, 0.801033f, -1.044831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.908400f, 0.314900f, -0.274900f }	},
	{	{ -1.070765f, 0.644971f, -1.061312f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.962200f, -0.057600f, -0.266000f }	},
	{	{ -1.020520f, 0.947920f, -0.362438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.878800f, 0.477200f, -0.000200f }	},
	{	{ 0.999999f, 0.995956f, -0.355842f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.355843f, 0.995956f, 1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.999999f, 0.995956f, 0.999999f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.999999f, 0.566632f, -1.099940f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.209400f, -0.977800f }	},
	{	{ -0.367594f, 0.566632f, -1.099939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.209400f, -0.977800f }	},
	{	{ -0.380791f, 0.644971f, -1.116718f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.051900f, -0.998700f }	},
	{	{ 0.999999f, 0.644971f, -1.116719f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.051900f, -0.998700f }	},
	{	{ 0.999999f, 0.995956f, -0.848221f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.990500f, -0.137600f }	},
	{	{ 0.999999f, 0.947225f, -1.020231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.962100f, -0.272600f }	},
	{	{ -0.888305f, 0.644971f, -1.116718f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.157500f, -0.057900f, -0.985800f }	},
	{	{ -1.070765f, 0.644971f, -1.061312f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.289900f, -0.058600f, -0.955300f }	},
	{	{ -1.054234f, 0.801033f, -1.044831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.297500f, 0.309900f, -0.903000f }	},
	{	{ -0.872515f, 0.801033f, -1.099939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.147300f, 0.315400f, -0.937400f }	},
	{	{ -0.367594f, 0.801033f, -1.099939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000100f, 0.298200f, -0.954500f }	},
	{	{ -0.349131f, 0.947225f, -1.020231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000200f, 0.478300f, -0.878200f }	},
	{	{ -0.849720f, 0.537025f, -1.020243f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.037600f, -0.978500f, -0.202900f }	},
	{	{ -0.349131f, 0.537025f, -1.020231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.978800f, -0.205000f }	},
	{	{ -0.346529f, 0.527155f, -0.848220f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.998400f, -0.057300f }	},
	{	{ -0.844490f, 0.527155f, -0.848270f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.038400f, -0.998400f, -0.041300f }	},
	{	{ -1.030449f, 0.537025f, -0.856113f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.223400f, -0.973900f, -0.040300f }	},
	{	{ -1.001096f, 0.544701f, -0.984115f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.166500f, -0.973700f, -0.155700f }	},
	{	{ -0.891754f, 0.527155f, -0.355917f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.067000f, -0.997800f, -0.001300f }	},
	{	{ -1.031114f, 0.537025f, -0.362438f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.226900f, -0.973900f, -0.000300f }	},
	{	{ -1.099940f, 0.566632f, -0.381801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.977800f, -0.209400f, -0.000000f }	},
	{	{ -1.099940f, 0.566632f, -0.879508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.966100f, -0.230200f, -0.117000f }	},
	{	{ -1.099940f, 0.566632f, -0.381801f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.383900f, -0.923400f, 0.000500f }	},
	{	{ -1.099940f, 0.566632f, -0.879508f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.354100f, -0.933300f, -0.060200f }	},
	{	{ -1.054234f, 0.566632f, -1.044831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.206700f, -0.955800f, -0.208900f }	},
	{	{ -1.054234f, 0.566632f, -1.044831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.933000f, -0.251100f, -0.257900f }	},
	{	{ 0.999999f, 0.801033f, -1.099940f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.298500f, -0.954400f }	},
	{	{ -0.367594f, 0.566632f, -1.099939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.937400f, -0.348200f }	},
	{	{ 0.999999f, 0.566632f, -1.099940f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.937400f, -0.348200f }	},
	{	{ 0.999999f, 0.537025f, -1.020231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.978800f, -0.205000f }	},
	{	{ -1.054234f, 0.566632f, -1.044831f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.280800f, -0.254400f, -0.925400f }	},
	{	{ -0.872515f, 0.566632f, -1.099939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.127700f, -0.232100f, -0.964300f }	},
	{	{ -0.872515f, 0.566632f, -1.099939f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.055700f, -0.946100f, -0.319100f }	},
	{	{ 0.999999f, 0.527155f, -0.848221f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.998400f, -0.057300f }	},
	{	{ 0.999999f, 0.947225f, -1.020231f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.478700f, -0.878000f }	},
	{	{ -1.099940f, 0.801033f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.954700f, 0.297700f, 0.000100f }	},
	{	{ -1.020232f, 0.947225f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.878800f, 0.477100f, 0.000200f }	},
	{	{ -1.020232f, 0.947225f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.270900f, 0.962600f, 0.000300f }	},
	{	{ -0.848221f, 0.995956f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.136700f, 0.990600f, 0.000200f }	},
	{	{ -1.020232f, 0.537025f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.223900f, -0.974600f, 0.000900f }	},
	{	{ -1.099940f, 0.566632f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.370500f, -0.928800f, 0.001500f }	},
	{	{ -1.116720f, 0.644971f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.998700f, -0.051900f, 0.000000f }	},
	{	{ -1.099940f, 0.566632f, 1.000001f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.977800f, -0.209400f, -0.000000f }	},
	{	{ -0.891753f, 0.527155f, 1.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.073500f, -0.997300f, 0.000300f }	},
};
#define _Cube_Grass_Corner_Tall_vertices_
#endif
#ifndef _Cube_Grass_Corner_Tall_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Cube_Grass_Corner_Tall_indices[348] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 7, 6, 8,
	 9, 7, 8,
	 1, 10, 11,
	 2, 1, 11,
	 12, 13, 14,
	 15, 12, 14,
	 11, 16, 17,
	 2, 11, 17,
	 15, 14, 18,
	 19, 15, 18,
	 2, 17, 20,
	 3, 2, 20,
	 21, 22, 23,
	 24, 21, 23,
	 5, 25, 26,
	 6, 5, 26,
	 24, 23, 27,
	 28, 24, 27,
	 6, 26, 29,
	 8, 6, 29,
	 20, 17, 30,
	 31, 20, 30,
	 16, 32, 30,
	 17, 16, 30,
	 29, 26, 33,
	 34, 29, 33,
	 13, 10, 1,
	 14, 13, 1,
	 14, 1, 0,
	 18, 14, 0,
	 22, 4, 7,
	 23, 22, 7,
	 23, 7, 9,
	 27, 23, 9,
	 25, 35, 33,
	 26, 25, 33,
	 36, 37, 38,
	 39, 36, 38,
	 40, 41, 36,
	 39, 40, 36,
	 42, 43, 40,
	 39, 42, 40,
	 38, 44, 42,
	 39, 38, 42,
	 45, 46, 47,
	 48, 45, 47,
	 49, 50, 45,
	 48, 49, 45,
	 40, 43, 49,
	 48, 40, 49,
	 47, 51, 40,
	 48, 47, 40,
	 52, 37, 53,
	 54, 52, 53,
	 55, 56, 57,
	 58, 55, 57,
	 44, 38, 59,
	 60, 44, 59,
	 61, 62, 63,
	 64, 61, 63,
	 65, 57, 61,
	 64, 65, 61,
	 42, 66, 65,
	 64, 42, 65,
	 63, 43, 42,
	 64, 63, 42,
	 67, 68, 69,
	 70, 67, 69,
	 71, 72, 67,
	 70, 71, 67,
	 73, 74, 71,
	 70, 73, 71,
	 75, 46, 45,
	 76, 75, 45,
	 71, 74, 77,
	 78, 71, 77,
	 79, 72, 71,
	 78, 79, 71,
	 45, 50, 80,
	 76, 45, 80,
	 58, 57, 65,
	 81, 58, 65,
	 68, 82, 83,
	 84, 68, 83,
	 85, 62, 61,
	 86, 85, 61,
	 67, 72, 79,
	 87, 67, 79,
	 82, 68, 67,
	 87, 82, 67,
	 61, 57, 56,
	 86, 61, 56,
	 88, 69, 68,
	 84, 88, 68,
	 81, 65, 66,
	 89, 81, 66,
	 37, 52, 59,
	 38, 37, 59,
	 47, 90, 91,
	 51, 47, 91,
	 92, 93, 36,
	 41, 92, 36,
	 94, 95, 77,
	 74, 94, 77,
	 46, 96, 90,
	 47, 46, 90,
	 75, 97, 96,
	 46, 75, 96,
	 73, 98, 94,
	 74, 73, 94,
	 36, 93, 53,
	 37, 36, 53,
};
#define _Cube_Grass_Corner_Tall_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Cube_Grass_Corner_Tall_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Cube_Grass_Corner_Tall_materials[4] =
{
	{
		{{ 0.389513f, 0.197571f, 0.081546f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Dirt_1",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.254828f, 0.130745f, 0.055087f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Dirt_2",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.629914f, 0.292244f, 0.135914f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Dirt_3",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.250294f, 0.328747f, 0.018225f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Green_Light",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Cube_Grass_Corner_Tall_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Cube_Grass_Corner_Tall_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Cube_Grass_Corner_Tall_batches[4][2] =
{
	{ 24, 0 },
	{ 48, 24 },
	{ 48, 72 },
	{ 228, 120 },
};
#define _Cube_Grass_Corner_Tall_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Cube_Grass_Corner_Tall_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Cube_Grass_Corner_Tall_meshes[4] =
{
	{
		"default",
		24,
		0,
		0,
	},
	{
		"default",
		48,
		24,
		1,
	},
	{
		"default",
		48,
		72,
		2,
	},
	{
		"default",
		228,
		120,
		3,
	},
};
#define _Cube_Grass_Corner_Tall_meshes_
#endif
