// "Fence_1.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Fence_1.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Fence_1_version_
const char Fence_1_version[4] = { '0','1','9','d' };
#define _Fence_1_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Fence_1_vertexcount_
const unsigned Fence_1_vertexcount = 136;
#define _Fence_1_vertexcount_
#endif
#ifndef _Fence_1_indexcount_
const unsigned Fence_1_indexcount = 312;
#define _Fence_1_indexcount_
#endif
#ifndef _Fence_1_materialcount_
const unsigned Fence_1_materialcount = 2; // can be used for batched draws
#define _Fence_1_materialcount_
#endif
#ifndef _Fence_1_meshcount_
const unsigned Fence_1_meshcount = 2;
#define _Fence_1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Fence_1_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Fence_1_vertices[136] =
{
	{	{ -0.251845f, 1.054300f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987500f, 0.157400f, -0.000000f }	},
	{	{ -0.251845f, 1.054300f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.987500f, 0.157400f, -0.000000f }	},
	{	{ -0.286406f, 1.159982f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.950500f, 0.310800f, -0.000000f }	},
	{	{ -0.286406f, 1.159982f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.950500f, 0.310800f, -0.000000f }	},
	{	{ -0.748155f, 1.054300f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.987500f, 0.157400f, -0.000000f }	},
	{	{ -0.713594f, 1.159982f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.950500f, 0.310800f, -0.000000f }	},
	{	{ -0.713594f, 1.159982f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.950500f, 0.310800f, -0.000000f }	},
	{	{ -0.748155f, 1.054300f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.987500f, 0.157400f, -0.000000f }	},
	{	{ -0.251845f, 0.000000f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.251845f, 0.000000f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.285055f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.285055f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.323538f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.323538f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.285055f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.285055f, 1.058689f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.309578f, 1.127210f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.323538f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.285055f, 1.058689f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.285055f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.323538f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.309578f, 1.127210f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.676461f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.714945f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.714945f, 1.058689f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.690422f, 1.127210f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.748155f, 0.000000f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.748155f, 0.000000f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.676461f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.714945f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.748155f, 0.000000f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.676461f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.714945f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.748155f, 0.000000f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.597020f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.597020f, 1.186524f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.500000f, 1.204057f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.402979f, 1.186524f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.402979f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.402979f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.402979f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.607323f, 1.222759f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.385700f, 0.922600f, -0.000000f }	},
	{	{ -0.713594f, 1.159982f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.508600f, 0.861000f, -0.000000f }	},
	{	{ -0.713594f, 1.159982f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.508600f, 0.861000f, -0.000000f }	},
	{	{ -0.607323f, 1.222759f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.385700f, 0.922600f, -0.000000f }	},
	{	{ -0.597020f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.597020f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.286406f, 1.159982f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.508600f, 0.861000f, -0.000000f }	},
	{	{ -0.392676f, 1.222759f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.385700f, 0.922600f, -0.000000f }	},
	{	{ -0.392676f, 1.222759f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.385700f, 0.922600f, -0.000000f }	},
	{	{ -0.286406f, 1.159982f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.508600f, 0.861000f, -0.000000f }	},
	{	{ -0.597020f, 1.186524f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.690422f, 1.127210f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.676461f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.597020f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.714945f, 1.058689f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.714945f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.500000f, 1.204057f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.500000f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.402979f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.402979f, 1.186524f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.500000f, 1.251127f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.500000f, 1.251127f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.500000f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.748155f, 1.054300f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704400f, 0.101400f, 0.702500f }	},
	{	{ -0.748155f, 0.000000f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.000000f, 0.707100f }	},
	{	{ -0.714945f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.000000f, 0.707100f }	},
	{	{ -0.714945f, 1.058689f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.702100f, 0.132500f, 0.699700f }	},
	{	{ -0.748155f, 0.000000f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.000000f, -0.707100f }	},
	{	{ -0.748155f, 1.054300f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704400f, 0.101400f, -0.702500f }	},
	{	{ -0.714945f, 1.058689f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.702100f, 0.132500f, -0.699700f }	},
	{	{ -0.714945f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.707100f, 0.000000f, -0.707100f }	},
	{	{ -0.285055f, 1.058689f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.702100f, 0.132500f, 0.699700f }	},
	{	{ -0.285055f, 0.000000f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.707100f, 0.000000f, 0.707100f }	},
	{	{ -0.251845f, 0.000000f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.707100f, 0.000000f, 0.707100f }	},
	{	{ -0.251845f, 1.054300f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704400f, 0.101400f, 0.702500f }	},
	{	{ -0.285055f, 0.000000f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.707100f, 0.000000f, -0.707100f }	},
	{	{ -0.285055f, 1.058689f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.702100f, 0.132500f, -0.699700f }	},
	{	{ -0.251845f, 1.054300f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.704400f, 0.101400f, -0.702500f }	},
	{	{ -0.251845f, 0.000000f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.707100f, 0.000000f, -0.707100f }	},
	{	{ -0.690422f, 1.127210f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.552100f, 0.389400f, -0.737300f }	},
	{	{ -0.713594f, 1.159982f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.502700f, 0.435400f, -0.746800f }	},
	{	{ -0.690422f, 1.127210f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.552100f, 0.389400f, 0.737300f }	},
	{	{ -0.713594f, 1.159982f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.502700f, 0.435400f, 0.746800f }	},
	{	{ -0.286406f, 1.159982f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.502700f, 0.435400f, -0.746800f }	},
	{	{ -0.309578f, 1.127210f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.552100f, 0.389400f, -0.737300f }	},
	{	{ -0.309578f, 1.127210f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.552100f, 0.389400f, 0.737300f }	},
	{	{ -0.286406f, 1.159982f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.502700f, 0.435400f, 0.746800f }	},
	{	{ -0.500000f, 1.204057f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.612900f, 0.790100f }	},
	{	{ -0.402979f, 1.186524f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.245100f, 0.586000f, 0.772400f }	},
	{	{ -0.392676f, 1.222759f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.234500f, 0.588400f, 0.773800f }	},
	{	{ -0.500000f, 1.251127f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.612900f, 0.790100f }	},
	{	{ -0.597020f, 1.186524f, 0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.245100f, 0.586000f, 0.772400f }	},
	{	{ -0.607323f, 1.222759f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.234500f, 0.588400f, 0.773800f }	},
	{	{ -0.402979f, 1.186524f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.245100f, 0.586000f, -0.772400f }	},
	{	{ -0.500000f, 1.204057f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.612900f, -0.790100f }	},
	{	{ -0.500000f, 1.251127f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.612900f, -0.790100f }	},
	{	{ -0.392676f, 1.222759f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.234500f, 0.588400f, -0.773800f }	},
	{	{ -0.597020f, 1.186524f, -0.132177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.245100f, 0.586000f, -0.772400f }	},
	{	{ -0.607323f, 1.222759f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.234500f, 0.588400f, -0.773800f }	},
	{	{ -0.251845f, 0.000000f, 0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.251845f, 0.000000f, -0.098967f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 1.000000f, 0.000000f, -0.000000f }	},
	{	{ -0.600000f, 0.455424f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.000000f, 0.455424f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ 0.000000f, 0.688394f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.600000f, 0.688394f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.000000f, 1.000000f }	},
	{	{ -0.600000f, 0.688394f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.000000f, 0.688394f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ 0.000000f, 0.455424f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.600000f, 0.455424f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.000000f, -1.000000f }	},
	{	{ -0.600000f, 0.725108f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.000000f, 0.725108f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ 0.000000f, 0.725108f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.600000f, 0.725108f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 1.000000f, -0.000000f }	},
	{	{ -0.600000f, 0.688394f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.707100f, 0.707100f }	},
	{	{ 0.000000f, 0.688394f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.707100f, 0.707100f }	},
	{	{ 0.000000f, 0.725108f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.707100f, 0.707100f }	},
	{	{ -0.600000f, 0.725108f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, 0.707100f, 0.707100f }	},
	{	{ 0.000000f, 0.688394f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.707100f, -0.707100f }	},
	{	{ -0.600000f, 0.688394f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.707100f, -0.707100f }	},
	{	{ -0.600000f, 0.725108f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.707100f, -0.707100f }	},
	{	{ 0.000000f, 0.725108f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, 0.707100f, -0.707100f }	},
	{	{ 0.000000f, 0.418710f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.707100f, -0.707100f }	},
	{	{ -0.600000f, 0.418710f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.707100f, -0.707100f }	},
	{	{ -0.600000f, 0.455424f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.707100f, -0.707100f }	},
	{	{ 0.000000f, 0.455424f, -0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.000000f, -0.707100f, -0.707100f }	},
	{	{ 0.000000f, 0.455424f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.707100f, 0.707100f }	},
	{	{ -0.600000f, 0.455424f, 0.062252f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.707100f, 0.707100f }	},
	{	{ -0.600000f, 0.418710f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.707100f, 0.707100f }	},
	{	{ 0.000000f, 0.418710f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -0.707100f, 0.707100f }	},
	{	{ -0.600000f, 0.418710f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.000000f, 0.418710f, -0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ 0.000000f, 0.418710f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
	{	{ -0.600000f, 0.418710f, 0.025538f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.000000f, -1.000000f, -0.000000f }	},
};
#define _Fence_1_vertices_
#endif
#ifndef _Fence_1_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Fence_1_indices[312] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 6,
	 7, 4, 6,
	 8, 9, 10,
	 11, 8, 10,
	 12, 11, 10,
	 13, 12, 10,
	 14, 15, 16,
	 17, 14, 16,
	 18, 19, 20,
	 21, 18, 20,
	 22, 23, 24,
	 25, 22, 24,
	 26, 4, 7,
	 27, 26, 7,
	 28, 29, 30,
	 31, 28, 30,
	 32, 31, 30,
	 33, 32, 30,
	 34, 22, 25,
	 35, 34, 25,
	 36, 37, 38,
	 39, 36, 38,
	 13, 40, 41,
	 12, 13, 41,
	 42, 43, 44,
	 45, 42, 44,
	 20, 39, 38,
	 21, 20, 38,
	 46, 28, 31,
	 47, 46, 31,
	 48, 49, 50,
	 51, 48, 50,
	 52, 53, 54,
	 55, 52, 54,
	 53, 56, 57,
	 54, 53, 57,
	 58, 59, 60,
	 61, 58, 60,
	 62, 63, 50,
	 49, 62, 50,
	 52, 55, 59,
	 58, 52, 59,
	 64, 65, 41,
	 40, 64, 41,
	 46, 47, 65,
	 64, 46, 65,
	 42, 45, 63,
	 62, 42, 63,
	 34, 35, 37,
	 36, 34, 37,
	 16, 61, 60,
	 17, 16, 60,
	 66, 67, 68,
	 69, 66, 68,
	 70, 71, 72,
	 73, 70, 72,
	 74, 75, 76,
	 77, 74, 76,
	 78, 79, 80,
	 81, 78, 80,
	 82, 72, 71,
	 83, 82, 71,
	 69, 84, 85,
	 66, 69, 85,
	 86, 80, 79,
	 87, 86, 79,
	 88, 74, 77,
	 89, 88, 77,
	 90, 91, 92,
	 93, 90, 92,
	 94, 90, 93,
	 95, 94, 93,
	 96, 97, 98,
	 99, 96, 98,
	 97, 100, 101,
	 98, 97, 101,
	 89, 92, 91,
	 88, 89, 91,
	 99, 86, 87,
	 96, 99, 87,
	 100, 82, 83,
	 101, 100, 83,
	 95, 85, 84,
	 94, 95, 84,
	 1, 0, 102,
	 103, 1, 102,
	 104, 105, 106,
	 107, 104, 106,
	 108, 109, 110,
	 111, 108, 110,
	 112, 113, 114,
	 115, 112, 114,
	 116, 117, 118,
	 119, 116, 118,
	 120, 121, 122,
	 123, 120, 122,
	 124, 125, 126,
	 127, 124, 126,
	 128, 129, 130,
	 131, 128, 130,
	 132, 133, 134,
	 135, 132, 134,
};
#define _Fence_1_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Fence_1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Fence_1_materials[2] =
{
	{
		{{ 0.300596f, 0.162337f, 0.046968f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Wood",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
	{
		{{ 0.430576f, 0.251731f, 0.069541f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Wood_Light",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Fence_1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Fence_1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Fence_1_batches[2][2] =
{
	{ 264, 0 },
	{ 48, 264 },
};
#define _Fence_1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Fence_1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Fence_1_meshes[2] =
{
	{
		"default",
		264,
		0,
		0,
	},
	{
		"default",
		48,
		264,
		1,
	},
};
#define _Fence_1_meshes_
#endif
