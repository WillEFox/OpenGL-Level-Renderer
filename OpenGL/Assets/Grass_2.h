// "Grass_2.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Grass_2.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Grass_2_version_
const char Grass_2_version[4] = { '0','1','9','d' };
#define _Grass_2_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Grass_2_vertexcount_
const unsigned Grass_2_vertexcount = 50;
#define _Grass_2_vertexcount_
#endif
#ifndef _Grass_2_indexcount_
const unsigned Grass_2_indexcount = 240;
#define _Grass_2_indexcount_
#endif
#ifndef _Grass_2_materialcount_
const unsigned Grass_2_materialcount = 1; // can be used for batched draws
#define _Grass_2_materialcount_
#endif
#ifndef _Grass_2_meshcount_
const unsigned Grass_2_meshcount = 1;
#define _Grass_2_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Grass_2_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Grass_2_vertices[50] =
{
	{	{ -0.155351f, 1.194295f, -0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.498200f, 0.523600f, -0.691100f }	},
	{	{ -0.032182f, 1.006630f, -0.151202f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.614200f, 0.451300f, -0.647300f }	},
	{	{ -0.199226f, 0.986372f, -0.197819f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.026200f, 0.120600f, -0.992300f }	},
	{	{ -0.273599f, 1.124911f, -0.182803f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.099900f, 0.179600f, -0.978600f }	},
	{	{ -0.372420f, 1.293328f, -0.123872f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.332100f, 0.566000f, -0.754500f }	},
	{	{ -0.264280f, 1.298084f, -0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.295700f, 0.725000f, -0.622000f }	},
	{	{ -0.391848f, 1.055527f, -0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704900f, -0.154200f, -0.692300f }	},
	{	{ -0.429320f, 1.201244f, -0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.777200f, 0.095500f, -0.622000f }	},
	{	{ -0.357913f, 0.974336f, -0.142742f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.621800f, -0.219000f, -0.751900f }	},
	{	{ 0.465561f, 1.008520f, -0.209716f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725300f, -0.126200f, -0.676700f }	},
	{	{ 0.444496f, 0.954850f, -0.221343f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.646300f, -0.163500f, -0.745300f }	},
	{	{ 0.199348f, 0.970623f, -0.316178f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.012300f, 0.153200f, -0.988100f }	},
	{	{ 0.255795f, 1.057334f, -0.305663f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.133100f, 0.184000f, -0.973900f }	},
	{	{ 0.416346f, 1.303963f, -0.209309f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.374200f, 0.573500f, -0.728800f }	},
	{	{ 0.509610f, 1.152213f, -0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.788600f, 0.093200f, -0.607800f }	},
	{	{ 0.063671f, 1.182403f, -0.229247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.461000f, 0.563000f, -0.685900f }	},
	{	{ 0.239834f, 1.327831f, -0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.221900f, 0.765700f, -0.603700f }	},
	{	{ -0.089557f, 0.982150f, -0.248411f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617100f, 0.512800f, -0.596700f }	},
	{	{ -0.405465f, 0.975976f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.922000f, -0.387200f, -0.000000f }	},
	{	{ -0.431264f, 1.032399f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.954200f, -0.299100f, -0.000000f }	},
	{	{ -0.479258f, 1.230639f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.982900f, 0.184100f, -0.000000f }	},
	{	{ -0.391848f, 1.055527f, 0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704900f, -0.154200f, 0.692300f }	},
	{	{ -0.429320f, 1.201244f, 0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.777200f, 0.095500f, 0.622000f }	},
	{	{ -0.357913f, 0.974336f, 0.142741f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.621800f, -0.219000f, 0.751900f }	},
	{	{ -0.199226f, 0.986372f, 0.197819f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.026200f, 0.120600f, 0.992300f }	},
	{	{ -0.273599f, 1.124911f, 0.182802f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.099900f, 0.179600f, 0.978600f }	},
	{	{ -0.372420f, 1.293328f, 0.123872f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.332100f, 0.566000f, 0.754500f }	},
	{	{ -0.155351f, 1.194295f, 0.137102f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.498200f, 0.523600f, 0.691100f }	},
	{	{ -0.264280f, 1.298084f, 0.095677f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.295700f, 0.725000f, 0.622000f }	},
	{	{ -0.032182f, 1.006630f, 0.151201f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.614200f, 0.451300f, 0.647300f }	},
	{	{ -0.265582f, 1.356017f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.318700f, 0.947800f, -0.000000f }	},
	{	{ -0.405361f, 1.349466f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.506100f, 0.862500f, -0.000000f }	},
	{	{ -0.179559f, 0.983820f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.791700f, 0.610900f, -0.000000f }	},
	{	{ -0.000371f, 1.224092f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.704300f, 0.709900f, -0.000000f }	},
	{	{ 0.240931f, 1.418154f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.232500f, 0.972600f, -0.000000f }	},
	{	{ 0.063671f, 1.182403f, 0.229247f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.461000f, 0.563000f, 0.685900f }	},
	{	{ 0.239834f, 1.327831f, 0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.221900f, 0.765700f, 0.603700f }	},
	{	{ -0.089557f, 0.982150f, 0.248410f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.617100f, 0.512800f, 0.596700f }	},
	{	{ 0.199348f, 0.970623f, 0.316177f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.012300f, 0.153200f, 0.988100f }	},
	{	{ 0.255795f, 1.057334f, 0.305662f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.133100f, 0.184000f, 0.973900f }	},
	{	{ 0.416346f, 1.303963f, 0.209308f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.374200f, 0.573500f, 0.728800f }	},
	{	{ 0.465561f, 1.008520f, 0.209716f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.725300f, -0.126200f, 0.676700f }	},
	{	{ 0.509610f, 1.152213f, 0.160951f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.788600f, 0.093200f, 0.607800f }	},
	{	{ 0.444496f, 0.954850f, 0.221342f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.646300f, -0.163500f, 0.745300f }	},
	{	{ 0.521002f, 0.943584f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.956200f, -0.292500f, -0.000000f }	},
	{	{ 0.536188f, 0.994767f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.965200f, -0.261300f, -0.000000f }	},
	{	{ 0.591761f, 1.189771f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.985600f, 0.169100f, -0.000000f }	},
	{	{ 0.469863f, 1.374734f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.557500f, 0.830100f, -0.000000f }	},
	{	{ 0.013901f, 1.027041f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.825300f, 0.564600f, -0.000000f }	},
	{	{ -0.115934f, 1.217424f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.748600f, 0.663000f, -0.000000f }	},
};
#define _Grass_2_vertices_
#endif
#ifndef _Grass_2_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Grass_2_indices[240] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 0,
	 3, 4, 0,
	 6, 7, 4,
	 3, 6, 4,
	 2, 8, 6,
	 3, 2, 6,
	 9, 10, 11,
	 12, 9, 11,
	 13, 14, 9,
	 12, 13, 9,
	 15, 16, 13,
	 12, 15, 13,
	 11, 17, 15,
	 12, 11, 15,
	 6, 8, 18,
	 19, 6, 18,
	 20, 7, 6,
	 19, 20, 6,
	 21, 22, 20,
	 19, 21, 20,
	 18, 23, 21,
	 19, 18, 21,
	 21, 23, 24,
	 25, 21, 24,
	 26, 22, 21,
	 25, 26, 21,
	 27, 28, 26,
	 25, 27, 26,
	 24, 29, 27,
	 25, 24, 27,
	 26, 28, 30,
	 31, 26, 30,
	 20, 22, 26,
	 31, 20, 26,
	 4, 7, 20,
	 31, 4, 20,
	 30, 5, 4,
	 31, 30, 4,
	 15, 17, 32,
	 33, 15, 32,
	 34, 16, 15,
	 33, 34, 15,
	 35, 36, 34,
	 33, 35, 34,
	 32, 37, 35,
	 33, 32, 35,
	 35, 37, 38,
	 39, 35, 38,
	 40, 36, 35,
	 39, 40, 35,
	 41, 42, 40,
	 39, 41, 40,
	 38, 43, 41,
	 39, 38, 41,
	 41, 43, 44,
	 45, 41, 44,
	 46, 42, 41,
	 45, 46, 41,
	 9, 14, 46,
	 45, 9, 46,
	 44, 10, 9,
	 45, 44, 9,
	 40, 42, 46,
	 47, 40, 46,
	 34, 36, 40,
	 47, 34, 40,
	 13, 16, 34,
	 47, 13, 34,
	 46, 14, 13,
	 47, 46, 13,
	 27, 29, 48,
	 49, 27, 48,
	 30, 28, 27,
	 49, 30, 27,
	 0, 5, 30,
	 49, 0, 30,
	 48, 1, 0,
	 49, 48, 0,
};
#define _Grass_2_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Grass_2_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Grass_2_materials[1] =
{
	{
		{{ 0.250294f, 0.328747f, 0.018225f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"Green_Light",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Grass_2_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Grass_2_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Grass_2_batches[1][2] =
{
	{ 240, 0 },
};
#define _Grass_2_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Grass_2_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Grass_2_meshes[1] =
{
	{
		"default",
		240,
		0,
		0,
	},
};
#define _Grass_2_meshes_
#endif
