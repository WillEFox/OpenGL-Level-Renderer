// "Numbers_1.h" generated by "Obj2Header.exe" [Version 1.9d] Author: L.Norri Fullsail University.
// Data is converted to left-handed coordinate system and UV data is V flipped for Direct3D/Vulkan.
// The companion file "Numbers_1.h2b" is a binary dump of this format(-padding) for more flexibility.
// Loading *.h2b: read version, sizes, handle strings(max len 260) by reading until null-terminated.
/***********************/
/*  Generator version  */
/***********************/
#ifndef _Numbers_1_version_
const char Numbers_1_version[4] = { '0','1','9','d' };
#define _Numbers_1_version_
#endif
/************************************************/
/*  This section contains the model's size data */
/************************************************/
#ifndef _Numbers_1_vertexcount_
const unsigned Numbers_1_vertexcount = 144;
#define _Numbers_1_vertexcount_
#endif
#ifndef _Numbers_1_indexcount_
const unsigned Numbers_1_indexcount = 336;
#define _Numbers_1_indexcount_
#endif
#ifndef _Numbers_1_materialcount_
const unsigned Numbers_1_materialcount = 1; // can be used for batched draws
#define _Numbers_1_materialcount_
#endif
#ifndef _Numbers_1_meshcount_
const unsigned Numbers_1_meshcount = 1;
#define _Numbers_1_meshcount_
#endif
/************************************************/
/*  This section contains the raw data to load  */
/************************************************/
#ifndef __OBJ_VEC3__
typedef struct _OBJ_VEC3_
{
	float x,y,z; // 3D Coordinate.
}OBJ_VEC3;
#define __OBJ_VEC3__
#endif
#ifndef __OBJ_VERT__
typedef struct _OBJ_VERT_
{
	OBJ_VEC3 pos; // Left-handed +Z forward coordinate w not provided, assumed to be 1.
	OBJ_VEC3 uvw; // D3D/Vulkan style top left 0,0 coordinate.
	OBJ_VEC3 nrm; // Provided direct from obj file, may or may not be normalized.
}OBJ_VERT;
#define __OBJ_VERT__
#endif
#ifndef _Numbers_1_vertices_
// Raw Vertex Data follows: Positions, Texture Coordinates and Normals.
const OBJ_VERT Numbers_1_vertices[144] =
{
	{	{ -0.124989f, 0.388429f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.909000f, 0.183500f, -0.374300f }	},
	{	{ -0.124989f, 0.227284f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.166652f, 0.227284f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.166652f, 0.388429f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.908300f, 0.186200f, -0.374500f }	},
	{	{ -0.124989f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.842000f, 0.381000f, -0.381900f }	},
	{	{ -0.092584f, 0.470265f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.842000f, 0.381000f, -0.381900f }	},
	{	{ -0.124989f, 0.388429f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.909000f, 0.183500f, 0.374300f }	},
	{	{ -0.092584f, 0.470265f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.842000f, 0.381000f, 0.381900f }	},
	{	{ -0.124989f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.842000f, 0.381000f, 0.381900f }	},
	{	{ -0.166652f, 0.388429f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.908300f, 0.186200f, 0.374500f }	},
	{	{ -0.166652f, 0.227284f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, 0.353600f }	},
	{	{ -0.124989f, 0.227284f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, 0.353600f }	},
	{	{ -0.124989f, 0.388429f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.300300f, 0.163500f, 0.939700f }	},
	{	{ -0.124989f, 0.227284f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.000001f, 0.227284f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.000001f, 0.388429f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.301200f, 0.173800f, 0.937600f }	},
	{	{ 0.000001f, 0.498908f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311300f, 0.352200f, 0.882600f }	},
	{	{ -0.092584f, 0.470265f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311300f, 0.352200f, 0.882600f }	},
	{	{ 0.124990f, 0.388429f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.300300f, 0.163500f, 0.939700f }	},
	{	{ 0.092586f, 0.470265f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311300f, 0.352200f, 0.882600f }	},
	{	{ 0.000001f, 0.498908f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311300f, 0.352200f, 0.882600f }	},
	{	{ 0.000001f, 0.388429f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.301200f, 0.173800f, 0.937600f }	},
	{	{ 0.000001f, 0.227284f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.124990f, 0.227284f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.124990f, 0.388429f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.909000f, 0.183500f, 0.374300f }	},
	{	{ 0.124990f, 0.227284f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, 0.353600f }	},
	{	{ 0.166653f, 0.227284f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, 0.353600f }	},
	{	{ 0.166653f, 0.388429f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.908300f, 0.186200f, 0.374500f }	},
	{	{ 0.124990f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.842000f, 0.381000f, 0.381900f }	},
	{	{ 0.092586f, 0.470265f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.842000f, 0.381000f, 0.381900f }	},
	{	{ 0.124990f, 0.388429f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.909000f, 0.183500f, -0.374300f }	},
	{	{ 0.092586f, 0.470265f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.842000f, 0.381000f, -0.381900f }	},
	{	{ 0.124990f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.842000f, 0.381000f, -0.381900f }	},
	{	{ 0.166653f, 0.388429f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.908300f, 0.186200f, -0.374500f }	},
	{	{ 0.166653f, 0.227284f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, -0.353600f }	},
	{	{ 0.124990f, 0.227284f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, -0.353600f }	},
	{	{ 0.124990f, 0.388429f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.300300f, 0.163500f, -0.939700f }	},
	{	{ 0.124990f, 0.227284f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, 0.227284f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, 0.388429f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.301200f, 0.173800f, -0.937600f }	},
	{	{ 0.000001f, 0.498908f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311300f, 0.352200f, -0.882600f }	},
	{	{ 0.092586f, 0.470265f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311300f, 0.352200f, -0.882600f }	},
	{	{ -0.124989f, 0.388429f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.300300f, 0.163500f, -0.939700f }	},
	{	{ -0.092584f, 0.470265f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311300f, 0.352200f, -0.882600f }	},
	{	{ 0.000001f, 0.498908f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311300f, 0.352200f, -0.882600f }	},
	{	{ 0.000001f, 0.388429f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.301200f, 0.173800f, -0.937600f }	},
	{	{ 0.000001f, 0.227284f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, -0.959400f }	},
	{	{ -0.124989f, 0.227284f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, -0.505616f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, 0.433400f }	},
	{	{ -0.092584f, -0.467682f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, 0.433400f }	},
	{	{ -0.124989f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, 0.433400f }	},
	{	{ 0.000001f, -0.554389f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, 0.433400f }	},
	{	{ 0.124990f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, 0.433400f }	},
	{	{ 0.092586f, -0.467682f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, 0.433400f }	},
	{	{ 0.000001f, -0.505616f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, 0.433400f }	},
	{	{ 0.000001f, -0.554389f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, 0.433400f }	},
	{	{ 0.000001f, -0.505616f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, -0.433400f }	},
	{	{ 0.092586f, -0.467682f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, -0.433400f }	},
	{	{ 0.124990f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, -0.433400f }	},
	{	{ 0.000001f, -0.554389f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.382200f, -0.816200f, -0.433400f }	},
	{	{ -0.124989f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, -0.433400f }	},
	{	{ -0.092584f, -0.467682f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, -0.433400f }	},
	{	{ 0.000001f, -0.505616f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, -0.433400f }	},
	{	{ 0.000001f, -0.554389f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.382200f, -0.816200f, -0.433400f }	},
	{	{ 0.000001f, 0.498908f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, 0.353600f }	},
	{	{ 0.092586f, 0.470265f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, 0.353600f }	},
	{	{ 0.124990f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, 0.353600f }	},
	{	{ 0.000001f, 0.535734f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, 0.353600f }	},
	{	{ -0.124989f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, 0.353600f }	},
	{	{ -0.092584f, 0.470265f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, 0.353600f }	},
	{	{ 0.000001f, 0.498908f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, 0.353600f }	},
	{	{ 0.000001f, 0.535734f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, 0.353600f }	},
	{	{ 0.000001f, 0.498908f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, -0.353600f }	},
	{	{ -0.092584f, 0.470265f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, -0.353600f }	},
	{	{ -0.124989f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, -0.353600f }	},
	{	{ 0.000001f, 0.535734f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.311800f, 0.881900f, -0.353600f }	},
	{	{ 0.124990f, 0.498908f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, -0.353600f }	},
	{	{ 0.092586f, 0.470265f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, -0.353600f }	},
	{	{ 0.000001f, 0.498908f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, -0.353600f }	},
	{	{ 0.000001f, 0.535734f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.311800f, 0.881900f, -0.353600f }	},
	{	{ 0.124990f, 0.038459f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.124990f, -0.162312f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, -0.162312f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, 0.038459f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, -0.959400f }	},
	{	{ -0.124989f, 0.038459f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, 0.038459f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.000001f, -0.162312f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, -0.959400f }	},
	{	{ -0.124989f, -0.162312f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, -0.959400f }	},
	{	{ 0.124990f, 0.038459f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, 0.353600f }	},
	{	{ 0.124990f, -0.162312f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, 0.353600f }	},
	{	{ 0.166653f, -0.162312f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, 0.353600f }	},
	{	{ 0.166653f, 0.038459f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, 0.353600f }	},
	{	{ 0.124990f, 0.038459f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, -0.353600f }	},
	{	{ 0.166653f, 0.038459f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, -0.353600f }	},
	{	{ 0.166653f, -0.162312f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, -0.353600f }	},
	{	{ 0.124990f, -0.162312f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.124989f, 0.038459f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, 0.959400f }	},
	{	{ -0.124989f, -0.162312f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.000001f, -0.162312f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.000001f, 0.038459f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.124990f, 0.038459f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.000001f, 0.038459f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.000001f, -0.162312f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, 0.959400f }	},
	{	{ 0.124990f, -0.162312f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.282000f, 0.000000f, 0.959400f }	},
	{	{ -0.124989f, 0.038459f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.124989f, -0.162312f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.166652f, -0.162312f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.166652f, 0.038459f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, -0.353600f }	},
	{	{ -0.124989f, 0.038459f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, 0.353600f }	},
	{	{ -0.166652f, 0.038459f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, 0.353600f }	},
	{	{ -0.166652f, -0.162312f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, 0.353600f }	},
	{	{ -0.124989f, -0.162312f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.935400f, 0.000000f, 0.353600f }	},
	{	{ -0.124989f, -0.359297f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.914700f, -0.143800f, -0.377600f }	},
	{	{ -0.092584f, -0.467682f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.869600f, -0.297100f, -0.394400f }	},
	{	{ -0.124989f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.869600f, -0.297100f, -0.394400f }	},
	{	{ -0.166652f, -0.359297f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.914400f, -0.145600f, -0.377800f }	},
	{	{ -0.124989f, -0.359297f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.914700f, -0.143800f, 0.377600f }	},
	{	{ -0.166652f, -0.359297f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.914400f, -0.145600f, 0.377800f }	},
	{	{ -0.124989f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.869600f, -0.297100f, 0.394400f }	},
	{	{ -0.092584f, -0.467682f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.869600f, -0.297100f, 0.394400f }	},
	{	{ -0.124989f, -0.359297f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.302700f, -0.128700f, 0.944400f }	},
	{	{ -0.092584f, -0.467682f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.320000f, -0.273300f, 0.907100f }	},
	{	{ 0.000001f, -0.505616f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.320000f, -0.273300f, 0.907100f }	},
	{	{ 0.000001f, -0.359297f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.303600f, -0.134900f, 0.943200f }	},
	{	{ 0.124990f, -0.359297f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.302700f, -0.128700f, 0.944400f }	},
	{	{ 0.000001f, -0.359297f, 0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.303600f, -0.134900f, 0.943200f }	},
	{	{ 0.000001f, -0.505616f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.320000f, -0.273300f, 0.907100f }	},
	{	{ 0.092586f, -0.467682f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.320000f, -0.273300f, 0.907100f }	},
	{	{ 0.124990f, -0.359297f, 0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.914700f, -0.143800f, 0.377600f }	},
	{	{ 0.092586f, -0.467682f, 0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.869600f, -0.297100f, 0.394400f }	},
	{	{ 0.124990f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.869600f, -0.297100f, 0.394400f }	},
	{	{ 0.166653f, -0.359297f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.914400f, -0.145600f, 0.377800f }	},
	{	{ 0.124990f, -0.359297f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.914700f, -0.143800f, -0.377600f }	},
	{	{ 0.166653f, -0.359297f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.914400f, -0.145600f, -0.377800f }	},
	{	{ 0.124990f, -0.505616f, -0.000000f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.869600f, -0.297100f, -0.394400f }	},
	{	{ 0.092586f, -0.467682f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.869600f, -0.297100f, -0.394400f }	},
	{	{ 0.124990f, -0.359297f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.302700f, -0.128700f, -0.944400f }	},
	{	{ 0.092586f, -0.467682f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.320000f, -0.273300f, -0.907100f }	},
	{	{ 0.000001f, -0.505616f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.320000f, -0.273300f, -0.907100f }	},
	{	{ 0.000001f, -0.359297f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ 0.303600f, -0.134900f, -0.943200f }	},
	{	{ -0.124989f, -0.359297f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.302700f, -0.128700f, -0.944400f }	},
	{	{ 0.000001f, -0.359297f, -0.146957f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.303600f, -0.134900f, -0.943200f }	},
	{	{ 0.000001f, -0.505616f, -0.110218f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.320000f, -0.273300f, -0.907100f }	},
	{	{ -0.092584f, -0.467682f, -0.081643f },	{ 0.000000f, 0.000000f, 0.000000f },	{ -0.320000f, -0.273300f, -0.907100f }	},
};
#define _Numbers_1_vertices_
#endif
#ifndef _Numbers_1_indices_
// Index Data follows: Sequential by mesh, Every Three Indices == One Triangle.
const unsigned int Numbers_1_indices[336] =
{
	 0, 1, 2,
	 3, 0, 2,
	 4, 5, 0,
	 3, 4, 0,
	 6, 7, 8,
	 9, 6, 8,
	 10, 11, 6,
	 9, 10, 6,
	 12, 13, 14,
	 15, 12, 14,
	 16, 17, 12,
	 15, 16, 12,
	 18, 19, 20,
	 21, 18, 20,
	 22, 23, 18,
	 21, 22, 18,
	 24, 25, 26,
	 27, 24, 26,
	 28, 29, 24,
	 27, 28, 24,
	 30, 31, 32,
	 33, 30, 32,
	 34, 35, 30,
	 33, 34, 30,
	 36, 37, 38,
	 39, 36, 38,
	 40, 41, 36,
	 39, 40, 36,
	 42, 43, 44,
	 45, 42, 44,
	 46, 47, 42,
	 45, 46, 42,
	 48, 49, 50,
	 51, 48, 50,
	 52, 53, 54,
	 55, 52, 54,
	 56, 57, 58,
	 59, 56, 58,
	 60, 61, 62,
	 63, 60, 62,
	 64, 65, 66,
	 67, 64, 66,
	 68, 69, 70,
	 71, 68, 70,
	 72, 73, 74,
	 75, 72, 74,
	 76, 77, 78,
	 79, 76, 78,
	 80, 81, 82,
	 83, 80, 82,
	 38, 37, 80,
	 83, 38, 80,
	 84, 47, 46,
	 85, 84, 46,
	 86, 87, 84,
	 85, 86, 84,
	 88, 89, 90,
	 91, 88, 90,
	 26, 25, 88,
	 91, 26, 88,
	 92, 35, 34,
	 93, 92, 34,
	 94, 95, 92,
	 93, 94, 92,
	 96, 97, 98,
	 99, 96, 98,
	 14, 13, 96,
	 99, 14, 96,
	 100, 23, 22,
	 101, 100, 22,
	 102, 103, 100,
	 101, 102, 100,
	 104, 105, 106,
	 107, 104, 106,
	 2, 1, 104,
	 107, 2, 104,
	 108, 11, 10,
	 109, 108, 10,
	 110, 111, 108,
	 109, 110, 108,
	 112, 113, 114,
	 115, 112, 114,
	 106, 105, 112,
	 115, 106, 112,
	 116, 111, 110,
	 117, 116, 110,
	 118, 119, 116,
	 117, 118, 116,
	 120, 121, 122,
	 123, 120, 122,
	 98, 97, 120,
	 123, 98, 120,
	 124, 103, 102,
	 125, 124, 102,
	 126, 127, 124,
	 125, 126, 124,
	 128, 129, 130,
	 131, 128, 130,
	 90, 89, 128,
	 131, 90, 128,
	 132, 95, 94,
	 133, 132, 94,
	 134, 135, 132,
	 133, 134, 132,
	 136, 137, 138,
	 139, 136, 138,
	 82, 81, 136,
	 139, 82, 136,
	 140, 87, 86,
	 141, 140, 86,
	 142, 143, 140,
	 141, 142, 140,
};
#define _Numbers_1_indices_
#endif
// Part of an OBJ_MATERIAL, the struct is 16 byte aligned so it is GPU register friendly.
#ifndef __OBJ_ATTRIBUTES__
typedef struct _OBJ_ATTRIBUTES_
{
	OBJ_VEC3    Kd; // diffuse reflectivity
	float	    d; // dissolve (transparency) 
	OBJ_VEC3    Ks; // specular reflectivity
	float       Ns; // specular exponent
	OBJ_VEC3    Ka; // ambient reflectivity
	float       sharpness; // local reflection map sharpness
	OBJ_VEC3    Tf; // transmission filter
	float       Ni; // optical density (index of refraction)
	OBJ_VEC3    Ke; // emissive reflectivity
	unsigned    illum; // illumination model
}OBJ_ATTRIBUTES;
#define __OBJ_ATTRIBUTES__
#endif
// This structure also has been made GPU register friendly so it can be transfered directly if desired.
// Note: Total struct size will vary depenedening on CPU processor architecture (string pointers).
#ifndef __OBJ_MATERIAL__
typedef struct _OBJ_MATERIAL_
{
	// The following items are typically used in a pixel/fragment shader, they are packed for GPU registers.
	OBJ_ATTRIBUTES attrib; // Surface shading characteristics & illumination model
	// All items below this line are not needed on the GPU and are generally only used during load time.
	const char* name; // the name of this material
	// If the model's materials contain any specific texture data it will be located below.
	const char* map_Kd; // diffuse texture
	const char* map_Ks; // specular texture
	const char* map_Ka; // ambient texture
	const char* map_Ke; // emissive texture
	const char* map_Ns; // specular exponent texture
	const char* map_d; // transparency texture
	const char* disp; // roughness map (displacement)
	const char* decal; // decal texture (lerps texture & material colors)
	const char* bump; // normal/bumpmap texture
	void* padding[2]; // 16 byte alignment on 32bit or 64bit
}OBJ_MATERIAL;
#define __OBJ_MATERIAL__
#endif
#ifndef _Numbers_1_materials_
// Material Data follows: pulled from a .mtl file of the same name if present.
const OBJ_MATERIAL Numbers_1_materials[1] =
{
	{
		{{ 0.451838f, 0.474059f, 0.404914f },
		1.000000f,
		{ 0.500000f, 0.500000f, 0.500000f },
		96.078430f,
		{ 1.000000f, 1.000000f, 1.000000f },
		60.000000f,
		{ 1.000000f, 1.000000f, 1.000000f },
		1.000000f,
		{ 0.000000f, 0.000000f, 0.000000f },
		2},
		"White",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
		"",
	},
};
#define _Numbers_1_materials_
#endif
/************************************************/
/*  This section contains the model's structure */
/************************************************/
#ifndef _Numbers_1_batches_
// Use this conveinence array to batch render all geometry by like material.
// Each entry corresponds to the same entry in the materials array above.
// The two numbers provided are the IndexCount and the IndexOffset into the indices array.
// If you need more fine grained control(ex: for transformations) use the OBJ_MESH data below.
const unsigned int Numbers_1_batches[1][2] =
{
	{ 336, 0 },
};
#define _Numbers_1_batches_
#endif
#ifndef __OBJ_MESH__
typedef struct _OBJ_MESH_
{
	const char* name;
	unsigned    indexCount;
	unsigned    indexOffset;
	unsigned    materialIndex;
}OBJ_MESH;
#define __OBJ_MESH__
#endif
#ifndef _Numbers_1_meshes_
// Mesh Data follows: Meshes are .obj groups sorted & split by material.
// Meshes are provided in sequential order, sorted by material first and name second.
const OBJ_MESH Numbers_1_meshes[1] =
{
	{
		"default",
		336,
		0,
		0,
	},
};
#define _Numbers_1_meshes_
#endif
